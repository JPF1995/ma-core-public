<?xml version="1.0"?>
<project name="MA - Core"
         basedir="."
         default="jsp-compile"
         xmlns:mvn="antlib:org.apache.maven.artifact.ant">
    <taskdef resource="net/sf/antcontrib/antlib.xml"
             classpath="${coreHome}/lib-opt/ant-contrib-1.0b3.jar" />

    <typedef resource="org/apache/maven/artifact/ant/antlib.xml"
             uri="antlib:org.apache.maven.artifact.ant"
             classpath="${coreHome}/lib-opt/maven-ant-tasks-2.1.3.jar" />

    <mvn:pom file="pom.xml" id="maven-pom" />
    <mvn:dependencies filesetId="maven-deps" type="jar" pomRefId="maven-pom" />
    <mvn:dependencies filesetId="maven-deps-runtime"
                      type="jar"
                      pomRefId="maven-pom"
                      useScope="runtime" />

    <property file="build.properties" />
    <property name="fullName"
              value="m2m2-${maven-pom.artifactId}-${maven-pom.version}" />
	<!-- Caution, core.target is not meant to be set to coreHome -->
    <property name="core.target" value="${coreHome}/dist/build" />
    <property name="core.release" value="${coreHome}/dist/release" />
    <property name="core.deploy.paths" value="${core.release}" />
    <!-- Build number file to allow overidding for Release Builds -->
    <property name="mango.build.number" value="mango.build.number" />

    <path id="master-classpath">
        <fileset refid="maven-deps" />
    </path>

    <!-- For compiling when modules are pre-installed -->
    <available property="modules-libs.exists"
               file="${coreHome}/web/modules"
               type="dir" />
    <if>
        <isset property="modules-libs.exists" />
        <then>
            <path id="module-libs">
                <fileset dir="${coreHome}/web/modules">
                    <include name="**/*.jar" />
                </fileset>
            </path>
        </then>
        <else>
            <path id="module-libs">
            </path>
        </else>
    </if>
    <target name="clean" description="Clean output directories">
        <delete dir="${core.target}" />
        <mkdir dir="${core.target}" />
    </target>

    <target name="configure"
            description="Copy changed static assets to build directory">
    	
    	<!-- Copy the standard information files -->
    	<copy todir="${core.target}" preservelastmodified="true">
	        <fileset dir="">
	            <include name="RELEASE-NOTES" />
	            <include name="licenseTypes.xml" />
	            <include name="LICENSE" />
	            <include name="README" />
	            <include name="Getting Started.txt" />
	        </fileset>
    	</copy>
        <copy todir="${core.target}/classes" preservelastmodified="true">
            <fileset dir="classes">
                <include name="**/*.*" />
            </fileset>
        </copy>
        <copy todir="${core.target}/db" preservelastmodified="true">
            <fileset dir="db">
                <include name="**/*.sql" />
            </fileset>
        </copy>
        <copy todir="${core.target}/ftl" preservelastmodified="true">
            <fileset dir="ftl">
                <include name="**/*.*" />
            </fileset>
        </copy>

        <!-- switch to determine if we have any local libs to use -->
        <available property="mango-lib.exists" file="lib" type="dir" />
        <if>
            <isset property="mango-lib.exists" />
            <then>
                <copy todir="${core.target}/lib" preservelastmodified="true">
                    <fileset dir="lib">
                        <include name="**/*.*" />
                    </fileset>
                </copy>
            </then>
            <else>
            </else>
        </if>

        <!-- Copy the Maven Deps into our folder -->
        <copy todir="${core.target}/lib" preservelastmodified="true">
            <mappedresources>
                <fileset refid="maven-deps-runtime" />
                <flattenmapper />
            </mappedresources>
        </copy>

        <copy todir="${core.target}/web" preservelastmodified="true">
            <fileset dir="web">
                <include name="**/*.*" />
                <exclude name="modules/**"/>
            </fileset>
        </copy>
        <!-- Copy the Dojo Debug JS Libraries -->
        <copy todir="${core.target}/web/resources" preservelastmodified="true">
            <fileset dir="dojo-build/dist/">
                <include name="**/*.*" />
            </fileset>
        </copy>

        <!-- Copy the Scripts into the target -->
        <property name="scriptsFiles" value="ma,ma-start,ma-stop,ma-restart,common,ma-init,upgrade"/>
	<!-- run the for loop on this for the scripts --> 
	<for list="${scriptFiles}" param="scriptName" delimiter=",">
        <sequential>
		<copy todir="${core.target}/bin" preservelastmodified="true">
			<fileset dir="scripts" includes="**/@{scriptName}" />
		</copy>
	</sequential>
	</for>
	
	<!-- copy the bat and the README file -->
	<copy todir="${core.target}/bin" preservelastmodified="true">
		<fileset dir="scripts" includes="**/*.bat" />
		<fileset dir="scripts" includes="**/README" />
        </copy>

	
	
	
	
	
        <!-- Cleanup the Linux scripts -->
	<for list="${scriptFiles}" param="scriptName" delimiter=",">
	<sequential>
	  <fixcrlf srcdir="${core.target}/bin"
                 includes="**/@{scriptName}"
                 eol="lf"
                 eof="remove" />
	  <chmod dir="${core.target}/bin" includes="**/@{scriptName}" perm="755" />
	</sequential>
	</for>
	
    	<!-- Create empty ext-enabled folder -->
    	<mkdir dir="${core.target}/bin/ext-enabled"/>

        <!-- Create the modules dir -->
        <mkdir dir="${core.target}/web/modules" />

        <!-- Create the filedata dir -->
        <mkdir dir="${core.target}/web/WEB-INF/filedata" />

        <!-- Create the empty folders for the overrides -->
        <mkdir dir="${core.target}/overrides/classes" />
        <mkdir dir="${core.target}/overrides/properties" />
        <mkdir dir="${core.target}/overrides/web" />
   
        <mkdir dir="${core.target}/logs" />
    </target>

    <target name="compile"
            depends="configure"
            description="Compile main source tree java files">
        <mkdir dir="${core.target}/classes" />
        <mkdir dir="${core.target}/classes/META-INF" />

        <tstamp>
            <format property="TODAY" pattern="yyyy-MM-dd HH:mm:ss" />
        </tstamp>

        <manifest file="${core.target}/classes/META-INF/MANIFEST.MF">
            <attribute name="Built-By" value="${vendor}" />
            <attribute name="Build-Date" value="${TODAY}" />
            <attribute name="Build-Version" value="${maven-pom.version}" />
        </manifest>

        <!-- Place the build number into the build (If there is already one, this breaks compatibility with the store) -->
        <available property="mango.build.number.exists"
                           file="${mango.build.number}"
                           type="file" />
        <if>
            <isset property="mango.build.number.exists" />
            <then>        
                <buildnumber file="${mango.build.number}" />
                <copy todir="${core.target}/classes" preservelastmodified="true">
                    <fileset file="${mango.build.number}" />
                </copy>

            </then>
        </if>


        <echo message="Building with Java ${ant.java.version}." />
        <javac destdir="${core.target}/classes"
               debug="true"
               debuglevel="lines,vars,source"
               deprecation="false"
               optimize="false"
               failonerror="true"
               includeantruntime="false"
               source="1.7"
               target="1.7">
            <src path="src" />
            <classpath refid="master-classpath" />
        </javac>

        <!-- Compile any patches -->
        <javac destdir="${core.target}/classes"
               debug="true"
               debuglevel="lines,vars,source"
               deprecation="false"
               optimize="false"
               failonerror="true"
               includeantruntime="false">
            <src path="src-patch" />
            <classpath refid="master-classpath" />
        </javac>
        <!-- Create a backup folder -->
        <mkdir dir="${core.target}/backup" />
    </target>

    <target name="jsp-compile"
            depends="compile"
            description="Compile the JSPs, add to core jar">
        <taskdef name="jasper2" classname="org.apache.jasper.JspC">
            <classpath>
                <path refid="master-classpath" />
                <pathelement path="${core.target}/classes" />
                <pathelement path="${core.target}/work/jsp" />
                <path refid="module-libs" />
            </classpath>
        </taskdef>
        <!-- If we have modules installed we need to collect their jars too -->

        <jasper2 validateXml="false"
                 uriroot="${core.target}/web"
                 webXmlFragment="${core.target}/web/WEB-INF/generated_web.xml"
                 addWebXmlMappings="true"
                 outputDir="${core.target}/work/jsp-src"
                 verbose="1">
        </jasper2>
        <mkdir dir="${core.target}/work/jsp" />
        <javac destdir="${core.target}/work/jsp"
               debug="true"
               debuglevel="lines,vars,source"
               deprecation="false"
               optimize="true"
               failonerror="true"
               includeantruntime="false"
               source="1.7"
               target="1.7">
            <src path="${core.target}/work/jsp-src" />
            <classpath>
                <path refid="master-classpath" />
                <pathelement path="${core.target}/classes" />
                <path refid="module-libs" />
                <!-- need to add all module libs to the classpath -->
            </classpath>
        </javac>
        <!-- Copy the compiled files back into our classes folder -->
        <copy todir="${core.target}/classes" preservelastmodified="true">
            <fileset dir="${core.target}/work/jsp">
                <include name="**/*.class" />
            </fileset>
        </copy>
    </target>

    <target name="jar"
            depends="jsp-compile,jar-src"
            description="Create a jar file of the compiled classes">
        <mkdir dir="${core.target}/lib" />
        <jar destfile="${core.target}/lib/ma-core-${maven-pom.version}.jar"
             manifest="${core.target}/classes/META-INF/MANIFEST.MF">
            <fileset dir="${core.target}/classes">
                <include name="**/*.class" />
            </fileset>
            <fileset file="${mango.build.number}">
            </fileset>
        </jar>

        <mvn:install file="${core.target}/lib/ma-core-${maven-pom.version}.jar">
            <pom refid="maven-pom" />
            <attach file="${core.release}/${fullName}-src.jar"
                    type="jar"
                    classifier="sources" />
<!--            <attach file="${core.release}/${fullName}-doc.jar"
                    type="jar"
                    classifier="javadoc" /> -->
        </mvn:install>

    </target>

    <target name="zip"
            description="Create zip release of the ${core.target}, in ${core.release} removing source files.">

        <!-- Fix the scripts -->
      	<for list="${scriptFiles}" param="scriptName" delimiter=",">
        <sequential>
        <fixcrlf srcdir="${core.target}/bin"
                 includes="**/@{scriptName}"
                 eol="lf"
                 eof="remove" />
	</sequential>
	</for>	


        <!-- create the release directory if DNE -->
        <mkdir dir="${core.release}" />

        <!-- Delete the uncompressed javascript files for dojo (removes about 5M) -->
        <delete>
            <fileset dir="${core.target}/web/resources"
                     includes="**/*.uncompressed.js" />
            <fileset dir="${core.release}" includes="${fullName}.zip" />
        </delete>


        <zip destfile="${core.release}/${fullName}.zip">
            <fileset dir="${core.target}">
                <include name="RELEASE-NOTES" />
                <include name="licenseTypes.xml" />
                <include name="LICENSE" />
                <include name="README" />
                <include name="Getting Started.txt" />
            </fileset>
            <zipfileset dir="${core.target}" filemode="755">
                <include name="bin/**/*" />
            </zipfileset>
            <fileset dir="${core.target}" >
                <include name="db/**/*" />
                <include name="ftl/**/*" />
                <include name="lib/**/*" />
                <include name="web/**/*" />
                <include name="work/jsp/**/*" />
                <include name="classes/debug-log4j.xml" />
                <include name="classes/env.properties" />
                <include name="classes/i18n.properties" />
                <include name="classes/log4j.xml" />
                <!-- Swagger Experimental 
                 See here for programmatic loading http://www.leveluplunch.com/blog/2014/04/16/spring-boot-swagger-springmvc-configuration/
                -->
                <include name="classes/swagger.properties" />
            </fileset>
            <!-- Ensure we don't end up with any overrides -->
            <fileset dir="${core.target}/overrides/classes">
                <exclude name="**/*" />
            </fileset>
            <fileset dir="${core.target}/overrides/properties">
                <exclude name="**/*" />
            </fileset>
            <fileset dir="${core.target}/overrides/web">
                <exclude name="**/*" />
            </fileset> 
        	<!-- add the empty logs dir -->
        	<fileset dir="${core.target}/logs">
                <exclude name="**/*" />
            </fileset>
        	<!-- add the empty backup dir -->
        	<fileset dir="${core.target}/backup">
                <exclude name="**/*" />
            </fileset>
        </zip>
    </target>

    <target name="public-release"
            depends="zip"
            description="copy the release contents to ${core.deploy.paths}, requires a fully-built core">
        
        <foreach list="${core.deploy.paths}"
                 target="|deploy"
                 param="deploy.path"
                 delimiter=",">
            <param name="deploy.file" value="${core.release}/${fullName}.zip" />
        </foreach>
    </target>

    <target name="|deploy">
        <echo message="Copying ${core.release}/${fullName}.jar to ${deploy.path}" />
        <copy todir="${deploy.path}" preservelastmodified="true">
            <fileset file="${core.release}/${fullName}.zip" />
        </copy>
    </target>


    <target name="docs" description="Generate Java Doc">
        <mkdir dir="${core.release}/java/doc" />
        <javadoc sourcepath="src"
                 destdir="${core.release}/java/doc"
                 classpathref="master-classpath" />
    </target>

    <target name="jar-doc" depends="docs" description="Create a jar file of the javadocs">
        <delete file="${core.release}/${fullName}-doc.jar" />
        <jar destfile="${core.release}/${fullName}-doc.jar">
            <fileset dir="${core.target}/java/doc">
                <include name="**/*" />
            </fileset>
        </jar>
    </target>


    <target name="jar-src" description="Create a jar file of the sources">
        <delete file="${core.release}/${fullName}-src.jar" />
        <jar destfile="${core.release}/${fullName}-src.jar">
            <fileset dir="src">
                <include name="**/*.java" />
            </fileset>
        </jar>
    </target>
    
    
    <target name="update-dojo"
            description="copy dojo debug files to target/web/resources">
        <!-- Copy the Dojo Debug JS Libraries -->
        <copy todir="${core.target}/web/resources" preservelastmodified="true">
            <fileset dir="dojo-build/dist/">
                <include name="**/*.*" />
            </fileset>
        </copy>
    </target>

    <!-- NEW Targets for Debugging at the Core Directory Level, above target directory-->
    <target name="jsp-compile-eclipse"
            description="Compile the JSPs in place for debugging">
        <taskdef name="jasper2" classname="org.apache.jasper.JspC">
            <classpath>
                <path refid="master-classpath" />
                <pathelement path="${coreHome}/classes" />
                <pathelement path="${coreHome}/maven-target/classes" />
                <path refid="module-libs" />
            </classpath>
        </taskdef>
        <!-- If we have modules installed we need to collect their jars too -->
        <mkdir dir="${core.target}/work/jsp" />
        <mkdir dir="${core.target}/work/jsp-src" />
        <jasper2 validateXml="false"
                 uriroot="${coreHome}/web"
                 addWebXmlMappings="false"
                 outputDir="${core.target}/work/jsp-src"
                 verbose="1">
        </jasper2>

        <javac destdir="${core.target}/work/jsp"
               debug="true"
               debuglevel="lines,vars,source"
               deprecation="false"
               optimize="true"
               failonerror="true"
               includeantruntime="false"
               source="1.7"
               target="1.7">
            <src path="${core.target}/work/jsp-src" />
            <classpath>
                <path refid="master-classpath" />
                <pathelement path="${coreHome}/classes" />
                <pathelement path="${coreHome}/maven-target/classes" />
                <path refid="module-libs" />
            </classpath>
        </javac>
        <!-- Copy the compiled files back into our classes folder REALLY? -->
        <copy todir="${coreHome}/maven-target/classes" preservelastmodified="true">
            <fileset dir="${core.target}/work/jsp">
                <include name="**/*.class" />
            </fileset>
        </copy>
    </target>

















    <!-- Potentially Remove Targets Below Here -->




    <target name="update-web"
            description="Update target web dir - Useful While Debugging">
        <copy todir="${core.target}/classes" preservelastmodified="true">
            <fileset dir="classes">
                <include name="**/*.*" />
            </fileset>
        </copy>
        <copy todir="${core.target}/db" preservelastmodified="true">
            <fileset dir="db">
                <include name="**/*.sql" />
            </fileset>
        </copy>
        <copy todir="${core.target}/ftl" preservelastmodified="true">
            <fileset dir="ftl">
                <include name="**/*.*" />
            </fileset>
        </copy>
        <copy todir="${core.target}/lib" preservelastmodified="true">
            <fileset dir="lib">
                <include name="**/*.*" />
            </fileset>
        </copy>
        <copy todir="${core.target}/web" preservelastmodified="true">
            <fileset dir="web">
                <include name="**/*.*" />
            </fileset>
        </copy>
    </target>

    <target name="dev-jar"
            depends="compile"
            description="Create a jar file of the compiled classes for dev build">

        <mkdir dir="${core.target}/lib" />
        <jar destfile="${core.target}/lib/ma-core-${maven-pom.version}.jar"
             manifest="${core.target}/classes/META-INF/MANIFEST.MF">
            <fileset dir="${core.target}/classes">
                <include name="**/*.class" />
            </fileset>
            <fileset file="${core.target}/classes/${mango.build.number}">
            </fileset>
        </jar>
        <mvn:install file="${core.target}/lib/ma-core-${maven-pom.version}.jar">
            <pom refid="maven-pom" />
        </mvn:install>
    </target>


    <target name="dev-build"
            depends="dev-jar"
            description="Merge Changes from Core Project into target during development">

        <copy todir="${core.target}/classes" preservelastmodified="true">
            <fileset dir="classes">
                <include name="**/*.*" />
            </fileset>
        </copy>

        <copy todir="${core.target}/overrides" preservelastmodified="true">
            <fileset dir="overrides">
                <include name="**/*.*" />
            </fileset>
        </copy>

        <copy todir="${core.target}/db" preservelastmodified="true">
            <fileset dir="db">
                <include name="**/*.sql" />
            </fileset>
        </copy>

	
	<for list="${scriptFiles}" param="scriptName" delimiter=",">
		<sequential>
			<copy todir="${core.target}/bin" preservelastmodified="true">
				<fileset dir="scripts" includes="**/@{scriptName}" />
			</copy>
		</sequential>
	</for>
	
        <!-- Copy the Scripts into the target -->
        <copy todir="${core.target}/bin" preservelastmodified="true">
            <fileset dir="scripts" includes="**/*.bat" />
        </copy>
        
	<!-- CHMOD the Linux scripts -->
	<for list="${scriptFiles}" param="scriptName" delimiter=",">
		<sequential>
			<chmod dir="${core.target}/bin" includes="**/@{scriptName}" perm="755" />
		</sequential>
	</for>
	

        <copy todir="${core.target}/ftl" preservelastmodified="true">
            <fileset dir="ftl">
                <include name="**/*.*" />
            </fileset>
        </copy>

        <copy todir="${core.target}/lib" preservelastmodified="true">
            <mappedresources>
                <fileset refid="maven-deps-runtime" />
                <flattenmapper />
            </mappedresources>
        </copy>

        <copy todir="${core.target}/web" preservelastmodified="true">
            <fileset dir="web">
                <include name="**/*.*" />
            </fileset>
        </copy>
        <!-- Copy the Dojo Debug JS Libraries -->
        <copy todir="${core.target}/web/resources" preservelastmodified="true">
            <fileset dir="dojo-build/dist/">
                <include name="**/*.*" />
            </fileset>
        </copy>

        <!-- Create the modules dir if not exists -->
        <mkdir dir="${core.target}/web/modules" />

        <!-- Make the filedata dir  if not exists -->
        <mkdir dir="${core.target}/web/WEB-INF/filedata" />

        <!-- Create these if not exists -->
        <mkdir dir="${core.target}/overrides" />
        <mkdir dir="${core.target}/logs" />
    </target>

    <target name="dev-jsp-compile"
            depends="dev-build"
            description="Pickup changes to JSPs, add to core jar">
        <jasper2 validateXml="false"
                 uriroot="${core.target}/web"
                 webXmlFragment="${core.target}/web/WEB-INF/generated_web.xml"
                 addWebXmlMappings="true"
                 outputDir="${core.target}/work/jsp"
                 verbose="1">

        </jasper2>
        <javac destdir="${core.target}/classes"
               debug="true"
               debuglevel="lines,vars,source"
               deprecation="false"
               optimize="true"
               failonerror="true"
               includeantruntime="false"
               source="1.7"
               target="1.7">
            <src path="${core.target}/work/jsp" />
            <classpath>
                <path refid="master-classpath" />
                <pathelement path="${core.target}/classes" />
            </classpath>
        </javac>

        <!-- Add compiled jsps to core jar -->
        <manifest file="${core.target}/work/MANIFEST.MF">
            <attribute name="Built-By" value="${vendor}" />
            <attribute name="Build-Date" value="${TODAY}" />
            <attribute name="Build-Version" value="${maven-pom.version}" />
        </manifest>
        <jar destfile="${core.target}/lib/ma-core-${maven-pom.version}.jar"
             manifest="${core.target}/work/MANIFEST.MF">
            <fileset dir="${core.target}/classes">
                <include name="**/*.class" />
            </fileset>
            <fileset file="${mango.build.number}">
            </fileset>
        </jar>
        <!-- Install the lib in maven -->
        <mvn:install file="${core.target}/lib/ma-core-${maven-pom.version}.jar">
            <pom refid="maven-pom" />
        </mvn:install>
    </target>

    <target name="dev-release"
            description="Zip Contents of Target for Development Release">
      
      	<for list="${scriptFiles}" param="scriptName" delimiter=",">
		<sequential>
			<copy todir="${core.target}/bin" preservelastmodified="true">
				<fixcrlf srcdir="scripts" includes="**/@{scriptName}" eol="lf" eof="remove" />
			</copy>
		</sequential>
	</for>


        <!-- create the release directory if DNE -->
        <mkdir dir="release" />
        <zip destfile="release/${fullName}-dev.zip">
            <fileset dir="">
                <include name="RELEASE-NOTES" />
                <include name="licenseTypes.xml" />
            </fileset>
            <fileset dir="${core.target}">
                <!-- TODO Figure out how to exclude the *.js.uncompressed.js files -->
                <exclude name="scripts/*" />
                <exclude name="overrides/*" />
                <include name="**/*" />
            </fileset>
            <zipfileset dir="overrides" includes="**/*" prefix="overrides" />
            <zipfileset dir="scripts" includes="**/*.bat" prefix="bin" />
            
	   
		<for list="${scriptFiles}" param="scriptName" delimiter=",">
			<sequential>
				<zipfileset dir="scripts"
				includes="**/@{scriptName}"
				prefix="bin"
				filemode="755" />
			</sequential>
		</for>
        </zip>
    </target>

    

    
    
    
    
    
    
</project>
