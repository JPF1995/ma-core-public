#!/usr/bin/env bash
##
##
## This is a commonly used file and can be imported into the other scripts for vars and functions
##
##
##	Author: Joseph Mills joseph@ihinfiniteautomation.com
##	Copyright: Infinite Automation all rights reserved,
##
##

###########
## Global VARS 
###########
MA_HOME=$(cd "$PRGDIR/.." >/dev/null; pwd -P)
verbose=0
upgradeArgument="All"
now=$(date +"%m-%d-%Y %r"); 
PRGDIR=$(dirname "$0");
mangpoPID=$(cat "$MA_HOME"/bin/ma.pid);
logFile=$MA_HOME/logs/ma-script.log;

allPID=$(ps aux | grep [b]in | grep [m]a-start | awk '{print $2}')  
pidName=$(ps aux | grep [b]in | grep [m]a-start | awk '{print $12}'
###########
# FUNCTIONS
##########

#####
## for ma-start ma-stop and ma-restart
#####
startMango(){
	if [ $verbose >= 1 ];
	then
		"$MA_HOME"/bin/ma start &;
	else
		"$MA_HOME"/bin/ma-start & 2>&1 /dev/null;
	fi
}

killPID(){
	if [[ $allPID != "" ]];
	then 
		echo "$now   Looks like there is a mango running here  $pidName" >> $logFile;
		echo "Found Another mango running "
		cat $allPID | while read -r line;
		do
			echo -n "Found Mango running here $pidName Would you like to stop it [y/n]?"
			read -n killoption;
			if [[ $killoption == "y" ]];
			then 
				kill $line;
				if [ $? != 0 ];
				then 
					echo "some thing has gone wrong with killing the process $line $pidName"
				else
					echo "$now Killed mango running here $pidName with the pid number of $line " >> $logFile; 
				fi
			elif [[ $killoption == "n" ]];
				echo "Ok not going to kill "
				exit 1;
			else
				echo "That is not a vaild option"
				echo "Please enter y or n"
			fi
		done;
		echo "$pidName "
	else
	fi
}

setJavaClasspathVars(){
	## Construct the Java classpath
	## FIXME move to common
	##
	MA_CP="$MA_HOME"/overrides/classes
	MA_CP=$MA_CP:"$MA_HOME"/classes
	MA_CP=$MA_CP:"$MA_HOME"/overrides/properties
	MA_CP="$MA_CP:$MA_HOME/overrides/lib/*"
	MA_CP="$MA_CP:$MA_HOME/lib/*"
}


areYouSurePID(){
}

scriptChecker(){
	if [ -z "$MA_HOME" ]; 
	then
		echo "Do not execute this file directly."
		echo "Run \'ma start\'  instead."
		exit 1;
	fi
}


##### 
## for ma script
####
mainHelp(){
cat << EOF
##################################################
##
##           Welcome to Mango
##
##    SCADA, HMI & Automation Software
##    Easy, Affordable, and Open Source
##
##
##################################################

Usage:
    ./ma [argument]

Accepted Arguments
    
    start --start)	This will start mango
    
    stop --stop)	This is used to try to shut down mango the nice way
 
    restart --restart)		Restart mango
    
    verbose --v --verbose)	Run mango verbosely from the command line, 
    
    upgrade --upgrade)		Upgrade all your mango moduels See Also upgrade --help

    h help --help)	Show the help page
EOF
}

################
## for upgrades
################
upgradeHelp(){
cat << EOF
This script is used to update mango moduels. You can use this script to individual modues or all of them 

By default it updates all of them,

Usage:
    ./upgrade [moduels]
    
Example: 
    ./upgrade sstTheme
    
EOF
}


removeOldJars(){
	find "$MA_HOME"/lib/ -name "*.jar" -exec rm {} \;
	rm -Rf "$MA_HOME"/work
}

removeOldZips()){
	find "$MA_HOME"/ -name "m2m2-core-*.zip" -exec unzip -o {} \;
	find "$MA_HOME"/ -name "m2m2-core-*.zip" -exec rm {} \;
}

changeOwnerShip(){
	cd "$MA_HOME"/
	chown -R $USER:$USER bin/
	cd -
}

changeBinPermissions(){
	## all the main bin files
	find "$MA_HOME"/bin/ -type f -exec chmod 644 {} \;
	find "$MA_HOME"/bin/ -type d -exec chmod 755 {} \;
	cd "$MA_HOME"/bin/
	for i in common ma mainit ma-restart ma-start ma-stop upgrade;
	do 
		chmod u+x $i;
	done;
	cd - ;

	##ext-av
	find "$MA_HOME"/bin/ext-available -type d -exec chmod 755 {} \;
	find "$MA_HOME"/bin/ext-available -type f -exec chmod 644 {} \;
	cd "$MA_HOME"/bin/ext-available;
	for i in debug out;
	do
		chmod u+x $i;
	done;
	cd - ;
}

##############################
## Lets use a file with names and read from that on a while line loop
## No reason to tie into the wildcards.  This would also make it easy
## to configure this option, Like adding and removing upgrade scripts 
## add the functions to the common file :) 
###############################
upgradeAllMods(){
	while read -r line;
	do
		"$MA_HOME"/bin/upgrade/$line;
		rm "$MA_HOME"/bin/upgrade/$line
	done < $upgradeConfigure;
	##Make a check to make sure that that rean good 
	if [ $? != 0 ];
	then 
		echo "Gezz Batman something went wrong"
	else
		echo "success upgrading mods"
	fi
}